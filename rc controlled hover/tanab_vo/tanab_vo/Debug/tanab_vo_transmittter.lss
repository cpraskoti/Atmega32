
tanab_vo_transmittter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b4  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000114  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a1  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019c  00000000  00000000  00000c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000dfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z10usart_initv>:
	while((UCSRA & 1<<UDRE)==0);
	UDR = data;//UPLOAD THE SENDING DATA IN BUFFER
}
void adc_enable(void)
{
	ADCSRA = 1<<ADEN | 1<<ADPS1;//ADC PRESCALING 4 AND enable ADC
  6c:	10 bc       	out	0x20, r1	; 32
  6e:	85 e0       	ldi	r24, 0x05	; 5
  70:	89 b9       	out	0x09, r24	; 9
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	8a b9       	out	0x0a, r24	; 10
  76:	8e eb       	ldi	r24, 0xBE	; 190
  78:	80 bd       	out	0x20, r24	; 32
  7a:	08 95       	ret

0000007c <_Z11usart_transh>:
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <_Z11usart_transh>
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <_Z13analog_read_0v>:
//read analog value from ADC0 and then converts to 10 bit digital
uint16_t analog_read_0(void)
{
	//READING ADC0
	uint16_t result;
	ADMUX = 1<<REFS0 ;
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=1<<ADSC;//START CONVERSION
  88:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);//WAIT UNTIL CONVERSION
  8a:	36 99       	sbic	0x06, 6	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <_Z13analog_read_0v+0x6>
	result = ADCW;
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	95 b1       	in	r25, 0x05	; 5
	return result;
	ADCW = 0;
}
  92:	08 95       	ret

00000094 <_Z13analog_read_1v>:
//read analog value from ADC1
uint16_t analog_read_1(void)
{
	uint16_t result;
	ADMUX = 1<<REFS0 | 1<<MUX0 | 0<<MUX1 | 0<<MUX2 | 0<<MUX3 | 0<<MUX4;
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=1<<ADSC;//START CONVERSION
  98:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);//WAIT UNTIL CONVERSION
  9a:	36 99       	sbic	0x06, 6	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <_Z13analog_read_1v+0x6>
	result = ADCW;//converion from 10-bit to the 8 bit data
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	95 b1       	in	r25, 0x05	; 5
	return result;
	result = 0;
}
  a2:	08 95       	ret

000000a4 <_Z13analog_read_2v>:
//READING ANALOG VALUE FROM ADC2
uint16_t analog_read_2(void)
{
	uint16_t result;
	
	ADMUX = 1 <<REFS0 | 0<<MUX0 | 1<<MUX1 | 0<<MUX2 | 0<<MUX3 | 0<<MUX4;
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=1<<ADSC;//START CONVERSION
  a8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);//WAIT UNTIL CONVERSION
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <_Z13analog_read_2v+0x6>
	result = ADCW;//converion from 10-bit to the 8 bit data
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
	return result;
	result = 0;
}
  b2:	08 95       	ret

000000b4 <_Z13analog_read_3v>:
//READING ANALOG VALUE FROM ADC3
uint16_t analog_read_3(void)
{
	uint16_t result;
	ADMUX = 1<<REFS0 | 1<<MUX0 | 1<<MUX1 | 0<<MUX2 | 0<<MUX3 | 0<<MUX4;
  b4:	83 e4       	ldi	r24, 0x43	; 67
  b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=1<<ADSC;//START CONVERSION
  b8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);//WAIT UNTIL CONVERSION
  ba:	36 99       	sbic	0x06, 6	; 6
  bc:	fe cf       	rjmp	.-4      	; 0xba <_Z13analog_read_3v+0x6>
	result = ADCW;//converion from 10-bit to the 8 bit data
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	95 b1       	in	r25, 0x05	; 5
	return result;
	result = 0;
}
  c2:	08 95       	ret

000000c4 <main>:
	uint8_t digit2;
	uint8_t digit3;
	uint8_t message;
	
   
	DDRA = 0X00;
  c4:	1a ba       	out	0x1a, r1	; 26
	usart_init();
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <_Z10usart_initv>
	while((UCSRA & 1<<UDRE)==0);
	UDR = data;//UPLOAD THE SENDING DATA IN BUFFER
}
void adc_enable(void)
{
	ADCSRA = 1<<ADEN | 1<<ADPS1;//ADC PRESCALING 4 AND enable ADC
  ca:	82 e8       	ldi	r24, 0x82	; 130
  cc:	86 b9       	out	0x06, r24	; 6
    while (1) 
    {
		adc_value0 = analog_read_0();
		if (adc_value0 < 400)
		{
			digit1 = 0x01;
  ce:	11 e0       	ldi	r17, 0x01	; 1
		}
		else if (adc_value0 > 700)
		{
			digit1 = 0x02;
  d0:	02 e0       	ldi	r16, 0x02	; 2
		else
		{
			adc_value1 = analog_read_1();
			if (adc_value1 < 400)
			{
				digit1 = 0x03;
  d2:	0f 2e       	mov	r0, r31
  d4:	f3 e0       	ldi	r31, 0x03	; 3
  d6:	ff 2e       	mov	r15, r31
  d8:	f0 2d       	mov	r31, r0
			}
			else if (adc_value1 > 700)
			{
				digit1 = 0x04;
  da:	68 94       	set
  dc:	dd 24       	eor	r13, r13
  de:	d2 f8       	bld	r13, 2
			}
			else
			{
				digit1 = 0x05;
  e0:	0f 2e       	mov	r0, r31
  e2:	f5 e0       	ldi	r31, 0x05	; 5
  e4:	ef 2e       	mov	r14, r31
  e6:	f0 2d       	mov	r31, r0
	DDRA = 0X00;
	usart_init();
	adc_enable();
    while (1) 
    {
		adc_value0 = analog_read_0();
  e8:	0e 94 42 00 	call	0x84	; 0x84 <_Z13analog_read_0v>
		if (adc_value0 < 400)
  ec:	80 39       	cpi	r24, 0x90	; 144
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	92 07       	cpc	r25, r18
  f2:	70 f0       	brcs	.+28     	; 0x110 <main+0x4c>
		{
			digit1 = 0x01;
		}
		else if (adc_value0 > 700)
  f4:	8d 3b       	cpi	r24, 0xBD	; 189
  f6:	92 40       	sbci	r25, 0x02	; 2
  f8:	68 f4       	brcc	.+26     	; 0x114 <main+0x50>
		{
			digit1 = 0x02;
		}
		else
		{
			adc_value1 = analog_read_1();
  fa:	0e 94 4a 00 	call	0x94	; 0x94 <_Z13analog_read_1v>
			if (adc_value1 < 400)
  fe:	80 39       	cpi	r24, 0x90	; 144
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	92 07       	cpc	r25, r18
 104:	48 f0       	brcs	.+18     	; 0x118 <main+0x54>
			{
				digit1 = 0x03;
			}
			else if (adc_value1 > 700)
 106:	8d 3b       	cpi	r24, 0xBD	; 189
 108:	92 40       	sbci	r25, 0x02	; 2
 10a:	40 f4       	brcc	.+16     	; 0x11c <main+0x58>
			{
				digit1 = 0x04;
			}
			else
			{
				digit1 = 0x05;
 10c:	ce 2d       	mov	r28, r14
 10e:	07 c0       	rjmp	.+14     	; 0x11e <main+0x5a>
    while (1) 
    {
		adc_value0 = analog_read_0();
		if (adc_value0 < 400)
		{
			digit1 = 0x01;
 110:	c1 2f       	mov	r28, r17
 112:	05 c0       	rjmp	.+10     	; 0x11e <main+0x5a>
		}
		else if (adc_value0 > 700)
		{
			digit1 = 0x02;
 114:	c0 2f       	mov	r28, r16
 116:	03 c0       	rjmp	.+6      	; 0x11e <main+0x5a>
		else
		{
			adc_value1 = analog_read_1();
			if (adc_value1 < 400)
			{
				digit1 = 0x03;
 118:	cf 2d       	mov	r28, r15
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0x5a>
			}
			else if (adc_value1 > 700)
			{
				digit1 = 0x04;
 11c:	cd 2d       	mov	r28, r13
			{
				digit1 = 0x05;
			}
		}
		//adc for stepper 1
		adc_value2 = analog_read_2();
 11e:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z13analog_read_2v>
		if (adc_value2 < 400)
 122:	80 39       	cpi	r24, 0x90	; 144
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	92 07       	cpc	r25, r18
 128:	28 f0       	brcs	.+10     	; 0x134 <main+0x70>
		{
			digit2 = 0x01;
		}
		else if (adc_value2 > 700)
 12a:	8d 3b       	cpi	r24, 0xBD	; 189
 12c:	92 40       	sbci	r25, 0x02	; 2
 12e:	20 f4       	brcc	.+8      	; 0x138 <main+0x74>
		{
			digit2 = 0x02;
		}
		else
		{
			digit2 = 0x03;
 130:	df 2d       	mov	r29, r15
 132:	03 c0       	rjmp	.+6      	; 0x13a <main+0x76>
		}
		//adc for stepper 1
		adc_value2 = analog_read_2();
		if (adc_value2 < 400)
		{
			digit2 = 0x01;
 134:	d1 2f       	mov	r29, r17
 136:	01 c0       	rjmp	.+2      	; 0x13a <main+0x76>
		}
		else if (adc_value2 > 700)
		{
			digit2 = 0x02;
 138:	d0 2f       	mov	r29, r16
		else
		{
			digit2 = 0x03;
		}
		//adc for stepper 2
		adc_value3 = analog_read_3();
 13a:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z13analog_read_3v>
		if(adc_value3 < 400)
 13e:	80 39       	cpi	r24, 0x90	; 144
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	92 07       	cpc	r25, r18
 144:	28 f0       	brcs	.+10     	; 0x150 <main+0x8c>
		{
			digit3 = 0x01;
		}
		else if (adc_value3 > 700)
 146:	8d 3b       	cpi	r24, 0xBD	; 189
 148:	92 40       	sbci	r25, 0x02	; 2
 14a:	20 f4       	brcc	.+8      	; 0x154 <main+0x90>
		{
			digit3 = 0x02;
		}
		else
		{
			digit3 = 0x03;
 14c:	3f 2d       	mov	r19, r15
 14e:	03 c0       	rjmp	.+6      	; 0x156 <main+0x92>
		}
		//adc for stepper 2
		adc_value3 = analog_read_3();
		if(adc_value3 < 400)
		{
			digit3 = 0x01;
 150:	31 2f       	mov	r19, r17
 152:	01 c0       	rjmp	.+2      	; 0x156 <main+0x92>
		}
		else if (adc_value3 > 700)
		{
			digit3 = 0x02;
 154:	30 2f       	mov	r19, r16
		{
			digit3 = 0x03;
		}
		
		digit1 = digit1 | 0x18;	//digit1 = 0b0001 1digit1
		digit2 = digit2 << 3;   //digit2 = 0b000digit2 000
 156:	8d 2f       	mov	r24, r29
 158:	88 0f       	add	r24, r24
 15a:	88 0f       	add	r24, r24
 15c:	88 0f       	add	r24, r24
		digit2 = digit2 | 0x07; //digit2 = 0b000digit2 111
 15e:	87 60       	ori	r24, 0x07	; 7
		else
		{
			digit3 = 0x03;
		}
		
		digit1 = digit1 | 0x18;	//digit1 = 0b0001 1digit1
 160:	2c 2f       	mov	r18, r28
 162:	28 61       	ori	r18, 0x18	; 24
		digit2 = digit2 << 3;   //digit2 = 0b000digit2 000
		digit2 = digit2 | 0x07; //digit2 = 0b000digit2 111
		digit2 = digit2 & digit1;//digit2 = 0b000digit2 digit1
 164:	98 2f       	mov	r25, r24
 166:	92 23       	and	r25, r18
        digit2 = digit2 | 0x60;  //digit2 = 0b011digit2 digit1
		
		digit3 = digit3 << 5;      //digit3 = 0b0digit30 0000
 168:	23 2f       	mov	r18, r19
 16a:	22 95       	swap	r18
 16c:	22 0f       	add	r18, r18
 16e:	20 7e       	andi	r18, 0xE0	; 224
	    digit3 = digit3 | 0x1F;   //digit3 = 0b0digit31 1111
 170:	2f 61       	ori	r18, 0x1F	; 31
		
		digit1 = digit1 | 0x18;	//digit1 = 0b0001 1digit1
		digit2 = digit2 << 3;   //digit2 = 0b000digit2 000
		digit2 = digit2 | 0x07; //digit2 = 0b000digit2 111
		digit2 = digit2 & digit1;//digit2 = 0b000digit2 digit1
        digit2 = digit2 | 0x60;  //digit2 = 0b011digit2 digit1
 172:	89 2f       	mov	r24, r25
 174:	80 66       	ori	r24, 0x60	; 96
		
		digit3 = digit3 << 5;      //digit3 = 0b0digit30 0000
	    digit3 = digit3 | 0x1F;   //digit3 = 0b0digit31 1111
		message = digit3 & digit2;//message = 0b0digit3digit2 digit1
		
		usart_trans(message);
 176:	82 23       	and	r24, r18
 178:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z11usart_transh>
		
		 	
    }
 17c:	b5 cf       	rjmp	.-150    	; 0xe8 <main+0x24>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
