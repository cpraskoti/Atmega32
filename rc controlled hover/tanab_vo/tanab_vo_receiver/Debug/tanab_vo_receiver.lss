
tanab_vo_receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000660  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000160  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d7  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  74:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z10usart_initv>:
#include <util/delay.h>
unsigned char value;
//(NOTE: BE CAREFUL THAT uint8_t HOLDS ONLY 8 BIT DATA AND DONT USE THIS TYPE FOR VARIABLE THAT HOLDS DATA OF 10-BIT DIGITAL O/P )
void usart_init(void)
{
	UBRRH = UBRR_VALUE >>8;
  7c:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRR_VALUE;
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	89 b9       	out	0x09, r24	; 9
	UCSRB = 1<<RXEN | 1<<TXEN;
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 1<<URSEL | 1<<UPM1 | 1<<UPM0 | 1<<USBS | 1<<UCSZ1 | 1<<UCSZ0;//acessing UCSRC:ODD parity mode:2 stop bits:8-bit character size
  86:	8e eb       	ldi	r24, 0xBE	; 190
  88:	80 bd       	out	0x20, r24	; 32
  8a:	08 95       	ret

0000008c <_Z10usart_recev>:
}
uint8_t usart_rece(void)
{
	while((UCSRA & 1<<RXC)==0);//WAIT UNTILL RECEIVING IS COMPLETE
  8c:	5f 9b       	sbis	0x0b, 7	; 11
  8e:	fe cf       	rjmp	.-4      	; 0x8c <_Z10usart_recev>
	value = UDR;
  90:	8c b1       	in	r24, 0x0c	; 12
  92:	80 93 60 00 	sts	0x0060, r24
	UDR = 0x00;
  96:	1c b8       	out	0x0c, r1	; 12
	return value;
}
  98:	80 91 60 00 	lds	r24, 0x0060
  9c:	08 95       	ret

0000009e <_Z23stepper_clockwise_PORTDv>:
void stepper_clockwise_PORTD(void)
{
	PORTD = 0xA0;
  9e:	80 ea       	ldi	r24, 0xA0	; 160
  a0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	81 ee       	ldi	r24, 0xE1	; 225
  a4:	94 e0       	ldi	r25, 0x04	; 4
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <_Z23stepper_clockwise_PORTDv+0x8>
  aa:	00 c0       	rjmp	.+0      	; 0xac <_Z23stepper_clockwise_PORTDv+0xe>
  ac:	00 00       	nop
	_delay_ms(5);
	PORTD = 0X60;
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	81 ee       	ldi	r24, 0xE1	; 225
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <_Z23stepper_clockwise_PORTDv+0x18>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_Z23stepper_clockwise_PORTDv+0x1e>
  bc:	00 00       	nop
	_delay_ms(5);
	PORTD = 0X50;
  be:	80 e5       	ldi	r24, 0x50	; 80
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_Z23stepper_clockwise_PORTDv+0x28>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_Z23stepper_clockwise_PORTDv+0x2e>
  cc:	00 00       	nop
	_delay_ms(5);
	PORTD = 0X90;
  ce:	80 e9       	ldi	r24, 0x90	; 144
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	81 ee       	ldi	r24, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z23stepper_clockwise_PORTDv+0x38>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z23stepper_clockwise_PORTDv+0x3e>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <_Z27stepper_anticlockwise_PORTDv>:
	_delay_ms(5);
}
void stepper_anticlockwise_PORTD(void)
{
	PORTD = 0x90;
  e0:	80 e9       	ldi	r24, 0x90	; 144
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	81 ee       	ldi	r24, 0xE1	; 225
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_Z27stepper_anticlockwise_PORTDv+0x8>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_Z27stepper_anticlockwise_PORTDv+0xe>
  ee:	00 00       	nop
	_delay_ms(5);
	PORTD = 0x50;
  f0:	80 e5       	ldi	r24, 0x50	; 80
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	81 ee       	ldi	r24, 0xE1	; 225
  f6:	94 e0       	ldi	r25, 0x04	; 4
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <_Z27stepper_anticlockwise_PORTDv+0x18>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_Z27stepper_anticlockwise_PORTDv+0x1e>
  fe:	00 00       	nop
	_delay_ms(5);
	PORTD = 0x60;
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	82 bb       	out	0x12, r24	; 18
 104:	81 ee       	ldi	r24, 0xE1	; 225
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_Z27stepper_anticlockwise_PORTDv+0x28>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_Z27stepper_anticlockwise_PORTDv+0x2e>
 10e:	00 00       	nop
	_delay_ms(5);
	PORTD = 0xA0;
 110:	80 ea       	ldi	r24, 0xA0	; 160
 112:	82 bb       	out	0x12, r24	; 18
 114:	81 ee       	ldi	r24, 0xE1	; 225
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <_Z27stepper_anticlockwise_PORTDv+0x38>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_Z27stepper_anticlockwise_PORTDv+0x3e>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <_Z18stepper_hold_PORTDv>:
	_delay_ms(5);
}
void stepper_hold_PORTD(void)
{
	PORTD = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	82 bb       	out	0x12, r24	; 18
 126:	87 e8       	ldi	r24, 0x87	; 135
 128:	93 e1       	ldi	r25, 0x13	; 19
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z18stepper_hold_PORTDv+0x8>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z18stepper_hold_PORTDv+0xe>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <_Z23stepper_clockwise_PORTCv>:
	_delay_ms(20);
}
void stepper_clockwise_PORTC(void)
{
	PORTC = 0x0A;
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	85 bb       	out	0x15, r24	; 21
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <_Z23stepper_clockwise_PORTCv+0x8>
 140:	00 c0       	rjmp	.+0      	; 0x142 <_Z23stepper_clockwise_PORTCv+0xe>
 142:	00 00       	nop
	_delay_ms(5);
	PORTC = 0X06;
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	85 bb       	out	0x15, r24	; 21
 148:	81 ee       	ldi	r24, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <_Z23stepper_clockwise_PORTCv+0x18>
 150:	00 c0       	rjmp	.+0      	; 0x152 <_Z23stepper_clockwise_PORTCv+0x1e>
 152:	00 00       	nop
	_delay_ms(5);
	PORTC = 0X05;
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	85 bb       	out	0x15, r24	; 21
 158:	81 ee       	ldi	r24, 0xE1	; 225
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <_Z23stepper_clockwise_PORTCv+0x28>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z23stepper_clockwise_PORTCv+0x2e>
 162:	00 00       	nop
	_delay_ms(5);
	PORTC = 0X09;
 164:	89 e0       	ldi	r24, 0x09	; 9
 166:	85 bb       	out	0x15, r24	; 21
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <_Z23stepper_clockwise_PORTCv+0x38>
 170:	00 c0       	rjmp	.+0      	; 0x172 <_Z23stepper_clockwise_PORTCv+0x3e>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <_Z27stepper_anticlockwise_PORTCv>:
	_delay_ms(5);
	
}
void stepper_anticlockwise_PORTC(void)
{
	PORTC = 0x09;
 176:	89 e0       	ldi	r24, 0x09	; 9
 178:	85 bb       	out	0x15, r24	; 21
 17a:	81 ee       	ldi	r24, 0xE1	; 225
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <_Z27stepper_anticlockwise_PORTCv+0x8>
 182:	00 c0       	rjmp	.+0      	; 0x184 <_Z27stepper_anticlockwise_PORTCv+0xe>
 184:	00 00       	nop
	_delay_ms(5);
	PORTC = 0x05;
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	85 bb       	out	0x15, r24	; 21
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <_Z27stepper_anticlockwise_PORTCv+0x18>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_Z27stepper_anticlockwise_PORTCv+0x1e>
 194:	00 00       	nop
	_delay_ms(5);
	PORTC = 0x06;
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	85 bb       	out	0x15, r24	; 21
 19a:	81 ee       	ldi	r24, 0xE1	; 225
 19c:	94 e0       	ldi	r25, 0x04	; 4
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <_Z27stepper_anticlockwise_PORTCv+0x28>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_Z27stepper_anticlockwise_PORTCv+0x2e>
 1a4:	00 00       	nop
	_delay_ms(5);
	PORTC = 0x0A;
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	81 ee       	ldi	r24, 0xE1	; 225
 1ac:	94 e0       	ldi	r25, 0x04	; 4
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <_Z27stepper_anticlockwise_PORTCv+0x38>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_Z27stepper_anticlockwise_PORTCv+0x3e>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <_Z18stepper_hold_PORTCv>:
	_delay_ms(5);
}
void stepper_hold_PORTC(void)
{
	PORTC = 0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	87 e8       	ldi	r24, 0x87	; 135
 1be:	93 e1       	ldi	r25, 0x13	; 19
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <_Z18stepper_hold_PORTCv+0x8>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <_Z18stepper_hold_PORTCv+0xe>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

000001ca <main>:
    uint8_t arm_value1 ;
    uint8_t arm_value2 ;
    uint8_t wheel_value;
    uint8_t message;
	
    DDRB  = 0XFF;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 1ce:	18 ba       	out	0x18, r1	; 24
    DDRD  = 0xFF;
 1d0:	81 bb       	out	0x11, r24	; 17
    PORTD = 0X00;
 1d2:	12 ba       	out	0x12, r1	; 18
    DDRC  = 0XFF;
 1d4:	84 bb       	out	0x14, r24	; 20
    PORTC = 0X00;
 1d6:	15 ba       	out	0x15, r1	; 21
    usart_init();
 1d8:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z10usart_initv>
		{
			PORTB = 0x09;//right
		}
		else
		{
			PORTB = 0xFF;//stop	wheel_value= 0x05
 1dc:	1f ef       	ldi	r17, 0xFF	; 255
		{
			PORTB = 0x06;//left
		}
		else if (wheel_value == 0x04)
		{
			PORTB = 0x09;//right
 1de:	0f 2e       	mov	r0, r31
 1e0:	f9 e0       	ldi	r31, 0x09	; 9
 1e2:	ef 2e       	mov	r14, r31
 1e4:	f0 2d       	mov	r31, r0
		{
			PORTB = 0X05;//forward
		}
		else if (wheel_value == 0x03)
		{
			PORTB = 0x06;//left
 1e6:	0f 2e       	mov	r0, r31
 1e8:	f6 e0       	ldi	r31, 0x06	; 6
 1ea:	ff 2e       	mov	r15, r31
 1ec:	f0 2d       	mov	r31, r0
		{
			PORTB = 0X0A;//BACKWARD
		}
		else if(wheel_value == 0x02)
		{
			PORTB = 0X05;//forward
 1ee:	05 e0       	ldi	r16, 0x05	; 5
	//	arm_value2 = arm_value2 >> 5;
		
		//wheel control
		if(wheel_value == 0x01)
		{
			PORTB = 0X0A;//BACKWARD
 1f0:	da e0       	ldi	r29, 0x0A	; 10
    DDRC  = 0XFF;
    PORTC = 0X00;
    usart_init();
    while (1) 
    {
		message = usart_rece();
 1f2:	0e 94 46 00 	call	0x8c	; 0x8c <_Z10usart_recev>
		wheel_value = message & 0x07;
 1f6:	98 2f       	mov	r25, r24
 1f8:	97 70       	andi	r25, 0x07	; 7
		
	//	arm_value2 = message & 0X60;
	//	arm_value2 = arm_value2 >> 5;
		
		//wheel control
		if(wheel_value == 0x01)
 1fa:	91 30       	cpi	r25, 0x01	; 1
 1fc:	11 f4       	brne	.+4      	; 0x202 <main+0x38>
		{
			PORTB = 0X0A;//BACKWARD
 1fe:	d8 bb       	out	0x18, r29	; 24
 200:	0d c0       	rjmp	.+26     	; 0x21c <main+0x52>
		}
		else if(wheel_value == 0x02)
 202:	92 30       	cpi	r25, 0x02	; 2
 204:	11 f4       	brne	.+4      	; 0x20a <main+0x40>
		{
			PORTB = 0X05;//forward
 206:	08 bb       	out	0x18, r16	; 24
 208:	09 c0       	rjmp	.+18     	; 0x21c <main+0x52>
		}
		else if (wheel_value == 0x03)
 20a:	93 30       	cpi	r25, 0x03	; 3
 20c:	11 f4       	brne	.+4      	; 0x212 <main+0x48>
		{
			PORTB = 0x06;//left
 20e:	f8 ba       	out	0x18, r15	; 24
 210:	05 c0       	rjmp	.+10     	; 0x21c <main+0x52>
		}
		else if (wheel_value == 0x04)
 212:	94 30       	cpi	r25, 0x04	; 4
 214:	11 f4       	brne	.+4      	; 0x21a <main+0x50>
		{
			PORTB = 0x09;//right
 216:	e8 ba       	out	0x18, r14	; 24
 218:	01 c0       	rjmp	.+2      	; 0x21c <main+0x52>
		}
		else
		{
			PORTB = 0xFF;//stop	wheel_value= 0x05
 21a:	18 bb       	out	0x18, r17	; 24
		}
		
		//stepper1 control
		arm_value2 = message & 0X60;
 21c:	c8 2f       	mov	r28, r24
 21e:	c0 76       	andi	r28, 0x60	; 96
		arm_value2 = arm_value2 >> 5;
 220:	c2 95       	swap	r28
 222:	c6 95       	lsr	r28
 224:	c7 70       	andi	r28, 0x07	; 7
		arm_value1 = message & 0x18;
 226:	88 71       	andi	r24, 0x18	; 24
		arm_value1 = arm_value1 >> 3;
 228:	86 95       	lsr	r24
 22a:	86 95       	lsr	r24
 22c:	86 95       	lsr	r24
		if (arm_value1 == 0x01)
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	19 f4       	brne	.+6      	; 0x238 <main+0x6e>
		{
			stepper_anticlockwise_PORTD();
 232:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z27stepper_anticlockwise_PORTDv>
 236:	07 c0       	rjmp	.+14     	; 0x246 <main+0x7c>
		}
		else if (arm_value1 == 0x02 )
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	19 f4       	brne	.+6      	; 0x242 <main+0x78>
		{
			stepper_clockwise_PORTD();
 23c:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z23stepper_clockwise_PORTDv>
 240:	02 c0       	rjmp	.+4      	; 0x246 <main+0x7c>
		}
		else
		{
			stepper_hold_PORTD();
 242:	0e 94 91 00 	call	0x122	; 0x122 <_Z18stepper_hold_PORTDv>
		}
		//stepper2 control
		if (arm_value2 == 0x01)
 246:	c1 30       	cpi	r28, 0x01	; 1
 248:	19 f4       	brne	.+6      	; 0x250 <main+0x86>
		{
			stepper_anticlockwise_PORTC();
 24a:	0e 94 bb 00 	call	0x176	; 0x176 <_Z27stepper_anticlockwise_PORTCv>
 24e:	d1 cf       	rjmp	.-94     	; 0x1f2 <main+0x28>
		}
		else if (arm_value2 == 0x02 )
 250:	c2 30       	cpi	r28, 0x02	; 2
 252:	19 f4       	brne	.+6      	; 0x25a <main+0x90>
		{
			stepper_clockwise_PORTC();
 254:	0e 94 9a 00 	call	0x134	; 0x134 <_Z23stepper_clockwise_PORTCv>
 258:	cc cf       	rjmp	.-104    	; 0x1f2 <main+0x28>
		}
		else
		{
			stepper_hold_PORTC();
 25a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z18stepper_hold_PORTCv>
 25e:	c9 cf       	rjmp	.-110    	; 0x1f2 <main+0x28>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
