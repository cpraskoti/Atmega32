
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000090  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000005a  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000091  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000160  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_7>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

 ISR(TIMER1_COMPA_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
PORTB ^= 1<<PINB0 | 1<<PINB1;
  7a:	98 b3       	in	r25, 0x18	; 24
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	89 27       	eor	r24, r25
  80:	88 bb       	out	0x18, r24	; 24
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <main>:


int main(void)
{
	sei();
  90:	78 94       	sei
	DDRB = 0X3;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	87 bb       	out	0x17, r24	; 23
	PORTB |= 1<<PINB0 | 1<<PINB1;
  96:	88 b3       	in	r24, 0x18	; 24
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	88 bb       	out	0x18, r24	; 24
	TCCR1A |= 0<<COM1A1 | 0<<COM1A0 | 0<<WGM13 | 0<<WGM12 | 0<<WGM11 | 0<<WGM10;
  9c:	8f b5       	in	r24, 0x2f	; 47
  9e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<CS12 | 0<<CS11 | 0<<CS10 ;
  a0:	8e b5       	in	r24, 0x2e	; 46
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 1<<OCIE1A;
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0;
  aa:	1d bc       	out	0x2d, r1	; 45
  ac:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 20000;
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	9e e4       	ldi	r25, 0x4E	; 78
  b2:	9b bd       	out	0x2b, r25	; 43
  b4:	8a bd       	out	0x2a, r24	; 42
{
PORTB ^= 1<<PINB0 | 1<<PINB1;
}


int main(void)
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x26>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
