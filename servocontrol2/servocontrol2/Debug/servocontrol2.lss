
servocontrol2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000012b  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e2  00000000  00000000  000002bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000145  00000000  00000000  0000039d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a8  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000025  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000006d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	DDRD |=  1<<PIND5;
  6c:	8d 9a       	sbi	0x11, 5	; 17
	
	TCCR1A |= 1<<COM1A1 | 1<<WGM11;//non -inverting mode and wgm mode: icr1 as top and 00 as Bottom
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	82 68       	ori	r24, 0x82	; 130
  72:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=1<<WGM12 | 1<<WGM13 | 1<<CS10 | 1<<CS11 ;//64 prescaLing
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	8b 61       	ori	r24, 0x1B	; 27
  78:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 4999 ;
  7a:	87 e8       	ldi	r24, 0x87	; 135
  7c:	93 e1       	ldi	r25, 0x13	; 19
  7e:	97 bd       	out	0x27, r25	; 39
  80:	86 bd       	out	0x26, r24	; 38
	
    /* Replace with your application code */
   
		while(1)
		{	
         for(int i = 140 ; i<=630 ; i+=5)
  82:	3c e8       	ldi	r19, 0x8C	; 140
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	83 2f       	mov	r24, r19
  88:	92 2f       	mov	r25, r18
		 {
			 OCR1A = i;
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	4f ef       	ldi	r20, 0xFF	; 255
  90:	51 ee       	ldi	r21, 0xE1	; 225
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	41 50       	subi	r20, 0x01	; 1
  96:	50 40       	sbci	r21, 0x00	; 0
  98:	60 40       	sbci	r22, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
	
    /* Replace with your application code */
   
		while(1)
		{	
         for(int i = 140 ; i<=630 ; i+=5)
  a0:	05 96       	adiw	r24, 0x05	; 5
  a2:	8b 37       	cpi	r24, 0x7B	; 123
  a4:	42 e0       	ldi	r20, 0x02	; 2
  a6:	94 07       	cpc	r25, r20
  a8:	81 f7       	brne	.-32     	; 0x8a <main+0x1e>
  aa:	ed cf       	rjmp	.-38     	; 0x86 <main+0x1a>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
