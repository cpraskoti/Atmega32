
adc_UART_status send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a9  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000182  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000258  00000000  00000000  00000643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027a  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z11usart_transh>:
	while((UCSRA & 1<<UDRE)==0);
	UDR = data;//UPLOAD THE SENDING DATA IN BUFFER
}
void adc_enable(void)
{
	ADCSRA = 1<<ADEN | 1<<ADPS1;//ADC PRESCALING 4 AND enable ADC
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <_Z11usart_transh>
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <_Z13analog_read_0v>:
//read analog value from ADC0 and then converts to 10 bit digital
uint16_t analog_read_0(void)
{
	//READING ADC0
	uint16_t result;
	ADMUX = 1<<REFS0 ;
  74:	80 e4       	ldi	r24, 0x40	; 64
  76:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=1<<ADSC;//START CONVERSION
  78:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);//WAIT UNTIL CONVERSION
  7a:	36 99       	sbic	0x06, 6	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <_Z13analog_read_0v+0x6>
	result = ADCW;
  7e:	84 b1       	in	r24, 0x04	; 4
  80:	95 b1       	in	r25, 0x05	; 5
	return result;
	ADCW = 0;
}
  82:	08 95       	ret

00000084 <_Z13analog_read_2v>:
//READING ANALOG VALUE FROM ADC2
uint16_t analog_read_2(void)
{
	uint16_t result;
	
	ADMUX = 1 <<REFS0 | 0<<MUX0 | 1<<MUX1 | 0<<MUX2 | 0<<MUX3 | 0<<MUX4;
  84:	82 e4       	ldi	r24, 0x42	; 66
  86:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=1<<ADSC;//START CONVERSION
  88:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);//WAIT UNTIL CONVERSION
  8a:	36 99       	sbic	0x06, 6	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <_Z13analog_read_2v+0x6>
	result = ADCW;//converion from 10-bit to the 8 bit data
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	95 b1       	in	r25, 0x05	; 5
	return result;
	result = 0;
}
  92:	08 95       	ret

00000094 <main>:

int main(void)
{
	DDRA = 0x00;
  94:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
			//else stop
			else
			{
				digit = 0x05;
				usart_trans(digit);
				PORTB = 0XF5;
  9a:	05 ef       	ldi	r16, 0xF5	; 245
			}
			else if (adc_value2 > 700)
			{
				digit = 0x04;
				usart_trans(digit);
				PORTB = 0XF4;
  9c:	14 ef       	ldi	r17, 0xF4	; 244
			//left
			if (adc_value2 < 400)
			{
				digit = 0x03;
				usart_trans(digit);
				PORTB = 0XF3;
  9e:	0f 2e       	mov	r0, r31
  a0:	f3 ef       	ldi	r31, 0xF3	; 243
  a2:	ff 2e       	mov	r15, r31
  a4:	f0 2d       	mov	r31, r0
		//forward
		else if (adc_value0 > 700)
		{
			digit = 0x02;
			usart_trans(digit);
			PORTB = 0XF2;
  a6:	c2 ef       	ldi	r28, 0xF2	; 242
		//backward
		if (adc_value0 < 400)
		{
			digit = 0x01;
			usart_trans(digit);
			PORTB = 0xF1;
  a8:	d1 ef       	ldi	r29, 0xF1	; 241
    {
		uint16_t adc_value0;
		uint16_t adc_value2;
		uint8_t digit;
		//wheel control part;
		adc_value0 = analog_read_0();
  aa:	0e 94 3a 00 	call	0x74	; 0x74 <_Z13analog_read_0v>
		// reads first from y-input and decide forward backward or if in mid position then checks x-input and decide left or right or to stop if x-input is also in mid position
		//backward
		if (adc_value0 < 400)
  ae:	80 39       	cpi	r24, 0x90	; 144
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	92 07       	cpc	r25, r18
  b4:	28 f4       	brcc	.+10     	; 0xc0 <main+0x2c>
		{
			digit = 0x01;
			usart_trans(digit);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11usart_transh>
			PORTB = 0xF1;
  bc:	d8 bb       	out	0x18, r29	; 24
  be:	1f c0       	rjmp	.+62     	; 0xfe <main+0x6a>
		}
		//forward
		else if (adc_value0 > 700)
  c0:	8d 3b       	cpi	r24, 0xBD	; 189
  c2:	92 40       	sbci	r25, 0x02	; 2
  c4:	28 f0       	brcs	.+10     	; 0xd0 <main+0x3c>
		{
			digit = 0x02;
			usart_trans(digit);
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11usart_transh>
			PORTB = 0XF2;
  cc:	c8 bb       	out	0x18, r28	; 24
  ce:	17 c0       	rjmp	.+46     	; 0xfe <main+0x6a>
		}
		else
		{
			adc_value2 = analog_read_2();
  d0:	0e 94 42 00 	call	0x84	; 0x84 <_Z13analog_read_2v>
			//left or right or stop
			//left
			if (adc_value2 < 400)
  d4:	80 39       	cpi	r24, 0x90	; 144
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	92 07       	cpc	r25, r18
  da:	28 f4       	brcc	.+10     	; 0xe6 <main+0x52>
			{
				digit = 0x03;
				usart_trans(digit);
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11usart_transh>
				PORTB = 0XF3;
  e2:	f8 ba       	out	0x18, r15	; 24
  e4:	0c c0       	rjmp	.+24     	; 0xfe <main+0x6a>
			}
			else if (adc_value2 > 700)
  e6:	8d 3b       	cpi	r24, 0xBD	; 189
  e8:	92 40       	sbci	r25, 0x02	; 2
  ea:	28 f0       	brcs	.+10     	; 0xf6 <main+0x62>
			{
				digit = 0x04;
				usart_trans(digit);
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11usart_transh>
				PORTB = 0XF4;
  f2:	18 bb       	out	0x18, r17	; 24
  f4:	04 c0       	rjmp	.+8      	; 0xfe <main+0x6a>
			}
			//else stop
			else
			{
				digit = 0x05;
				usart_trans(digit);
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z11usart_transh>
				PORTB = 0XF5;
  fc:	08 bb       	out	0x18, r16	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	87 e8       	ldi	r24, 0x87	; 135
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x6e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x74>
 108:	00 00       	nop
 10a:	cf cf       	rjmp	.-98     	; 0xaa <main+0x16>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
