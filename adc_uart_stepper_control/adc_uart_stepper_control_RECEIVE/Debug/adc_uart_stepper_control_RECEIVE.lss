
adc_uart_stepper_control_RECEIVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003ec  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014d  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000275  00000000  00000000  00000795  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c8  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000029  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000d71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z10usart_initv>:
#include <util/delay.h>

//(NOTE: BE CAREFUL THAT uint8_t HOLDS ONLY 8 BIT DATA AND DONT USE THIS TYPE FOR VARIABLE THAT HOLDS DATA OF 10-BIT DIGITAL O/P )
void usart_init(void)
{
	UBRRH = UBRR_VALUE >>8;
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRR_VALUE;
  6e:	8b e2       	ldi	r24, 0x2B	; 43
  70:	89 b9       	out	0x09, r24	; 9
	UCSRB = 1<<RXEN;
  72:	80 e1       	ldi	r24, 0x10	; 16
  74:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 1<<URSEL | 1<<UPM1 | 1<<UPM0 | 1<<USBS | 1<<UCSZ1 | 1<<UCSZ0;//acessing UCSRC:ODD parity mode:2 stop bits:8-bit character size	
  76:	8e eb       	ldi	r24, 0xBE	; 190
  78:	80 bd       	out	0x20, r24	; 32
  7a:	08 95       	ret

0000007c <_Z10usart_recev>:
}
uint8_t usart_rece(void)
{
	while((UCSRA & 1<<RXC)==0);//WAIT UNTILL RECEIVING IS COMPLETE
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <_Z10usart_recev>
	return UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <_Z23stepper_clockwise_PORTDv>:

void stepper_clockwise_PORTD(void)
{
	PORTD = 0x0A;
  84:	8a e0       	ldi	r24, 0x0A	; 10
  86:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z23stepper_clockwise_PORTDv+0x8>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z23stepper_clockwise_PORTDv+0xe>
  92:	00 00       	nop
	_delay_ms(50);
	PORTD = 0X06;
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	82 bb       	out	0x12, r24	; 18
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <_Z23stepper_clockwise_PORTDv+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_Z23stepper_clockwise_PORTDv+0x1e>
  a2:	00 00       	nop
     _delay_ms(50);
	PORTD = 0X05;
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <_Z23stepper_clockwise_PORTDv+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_Z23stepper_clockwise_PORTDv+0x2e>
  b2:	00 00       	nop
     _delay_ms(50);
	PORTD = 0X09;
  b4:	89 e0       	ldi	r24, 0x09	; 9
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <_Z23stepper_clockwise_PORTDv+0x38>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_Z23stepper_clockwise_PORTDv+0x3e>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <_Z27stepper_anticlockwise_PORTDv>:
	_delay_ms(50);
}
void stepper_anticlockwise_PORTD(void)
{
	PORTD = 0x09;
  c6:	89 e0       	ldi	r24, 0x09	; 9
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <_Z27stepper_anticlockwise_PORTDv+0x8>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_Z27stepper_anticlockwise_PORTDv+0xe>
  d4:	00 00       	nop
    _delay_ms(50);
	PORTD = 0x05;
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	82 bb       	out	0x12, r24	; 18
  da:	83 ed       	ldi	r24, 0xD3	; 211
  dc:	90 e3       	ldi	r25, 0x30	; 48
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z27stepper_anticlockwise_PORTDv+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z27stepper_anticlockwise_PORTDv+0x1e>
  e4:	00 00       	nop
    _delay_ms(50);
	PORTD = 0x06;
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	83 ed       	ldi	r24, 0xD3	; 211
  ec:	90 e3       	ldi	r25, 0x30	; 48
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <_Z27stepper_anticlockwise_PORTDv+0x28>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_Z27stepper_anticlockwise_PORTDv+0x2e>
  f4:	00 00       	nop
    _delay_ms(50);
	PORTD = 0x0A;
  f6:	8a e0       	ldi	r24, 0x0A	; 10
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	90 e3       	ldi	r25, 0x30	; 48
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <_Z27stepper_anticlockwise_PORTDv+0x38>
 102:	00 c0       	rjmp	.+0      	; 0x104 <_Z27stepper_anticlockwise_PORTDv+0x3e>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <_Z18stepper_hold_PORTDv>:
	_delay_ms(50);	
}
void stepper_hold_PORTD(void)
{
	PORTD = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	83 ed       	ldi	r24, 0xD3	; 211
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <_Z18stepper_hold_PORTDv+0x8>
 114:	00 c0       	rjmp	.+0      	; 0x116 <_Z18stepper_hold_PORTDv+0xe>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <main>:
}

int main(void)
{
	uint8_t arm_value1;
	DDRD = 0XFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0XFF;
 11e:	82 bb       	out	0x12, r24	; 18
	usart_init();
 120:	0e 94 36 00 	call	0x6c	; 0x6c <_Z10usart_initv>
    /* Replace with your application code */
    while (1) 
    {
		//stepper motor1 control
		arm_value1 = usart_rece();
 124:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z10usart_recev>
		if (arm_value1 == 0x06) //joystick is left
 128:	86 30       	cpi	r24, 0x06	; 6
 12a:	19 f4       	brne	.+6      	; 0x132 <main+0x18>
		{
			stepper_anticlockwise_PORTD();
 12c:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z27stepper_anticlockwise_PORTDv>
 130:	07 c0       	rjmp	.+14     	; 0x140 <main+0x26>
		}
		else if(arm_value1 == 0x07)//if joystick is right
 132:	87 30       	cpi	r24, 0x07	; 7
 134:	19 f4       	brne	.+6      	; 0x13c <main+0x22>
		{
			stepper_clockwise_PORTD();
 136:	0e 94 42 00 	call	0x84	; 0x84 <_Z23stepper_clockwise_PORTDv>
 13a:	02 c0       	rjmp	.+4      	; 0x140 <main+0x26>
		}
		else
		{
			stepper_hold_PORTD(); //ARM_VALUE = 0X08 : HOLD STEPPER MOTOR 1
 13c:	0e 94 84 00 	call	0x108	; 0x108 <_Z18stepper_hold_PORTDv>
 140:	87 e8       	ldi	r24, 0x87	; 135
 142:	93 e1       	ldi	r25, 0x13	; 19
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x2a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x30>
 14a:	00 00       	nop
 14c:	eb cf       	rjmp	.-42     	; 0x124 <main+0xa>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
